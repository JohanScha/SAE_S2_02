import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class GrapheListe implements Graphe{
    private ArrayList<String> noeuds;
    private ArrayList<Arcs> adjacente;

    public  GrapheListe() {
        this.noeuds = new ArrayList<>();
        this.adjacente = new ArrayList<>();
    }

    public GrapheListe(String nom){
        this.noeuds = new ArrayList<>();
        this.adjacente = new ArrayList<>();
        try {
            BufferedReader br=new BufferedReader(new FileReader(nom));
            String ligne=br.readLine();
            while(ligne!=null){
                String[] separation=ligne.trim().split("\t");
                String depart = separation[0];
                String destination = separation[1];
                double cout = Double.parseDouble(separation[2]);

                this.ajouterArc(depart, destination, cout);
                }
        } catch (FileNotFoundException e) {
            System.out.println("Le fichier n'est pas trouv√©");
        } catch (IOException e) {
            System.out.println("Erreur de lecture du fichier");
        }


    }

    public List<String> listeNoeuds() {
        return noeuds;
    }

    public List<Arc> suivants(String n) {
        int i = getIndice(n);
        if (i == -1) return new ArrayList<>();
        return adjacente.get(i).getArcs();
    }

    public int getIndice(String nom) {
        return noeuds.indexOf(nom);
    }

    public void ajouterArc(String depart, String destination, double cout){
        int indiceDepart = getIndice(depart);
        if (indiceDepart == -1) {
            noeuds.add(depart);
            adjacente.add(new Arcs());
            indiceDepart = noeuds.size() - 1;
        }

        int indiceDestination = getIndice(destination);
        if (indiceDestination == -1) {
            noeuds.add(destination);
            adjacente.add(new Arcs());
        }

        adjacente.get(indiceDepart).ajouterArc(new Arc(destination, cout));
    }
    public String toString(){
        StringBuilder sb = new StringBuilder();
            for(int i = 0; i < noeuds.size(); i++){
                String noeud = noeuds.get(i);
                sb.append(noeud).append(" -> ");
                List<Arc> arcs = adjacente.get(i).getArcs();
                for(int j = 0; j < arcs.size(); j++){
                    Arc arc = arcs.get(j);
                    sb.append(arc.getDest()).append("(").append(arc.getCout()).append(") ");
                }
                sb.append("\n");
            }
            return sb.toString();
    }
}
