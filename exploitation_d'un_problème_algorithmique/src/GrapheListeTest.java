import org.junit.Test;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


import static org.junit.Assert.*;

public class GrapheListeTest {
    @Test
    public void test1_Constructeur() {
        GrapheListe graphe = new GrapheListe();

        // Vérifie que la liste des noeuds est bien initialisée et vide
        List<String> noeuds = graphe.listeNoeuds();
        assertNotNull(noeuds, "La liste des noeuds ne doit pas être nulle");
        assertEquals(0, noeuds.size(), "La liste des noeuds doit être vide");

        // Vérifie que la méthode suivants() retourne une liste vide si le nœud n'existe pas
        List<Arc> arcs = graphe.suivants("inexistant");
        assertNotNull(arcs, "La liste des arcs ne doit pas être nulle même pour un nœud inexistant");
        assertEquals(0, arcs.size(), "La liste des arcs doit être vide pour un nœud inexistant");
    }

    @Test
    public void test2_GetIndice() {
        GrapheListe graphe = new GrapheListe();
        graphe.ajouterArc("A", "B", 1.0);

        assertEquals(0, graphe.getIndice("A"));
        assertEquals(1, graphe.getIndice("B"));
        assertEquals(-1, graphe.getIndice("X"), "Le noeud 'X' n'existe pas donc l'indice doit être -1");
    }

    public void test3_AjouterArc() {
        GrapheListe graphe = new GrapheListe();

        graphe.ajouterArc("A", "B", 2.5);
        graphe.ajouterArc("A", "C", 1.5);
        graphe.ajouterArc("C", "D", 4.0);

        List<Arc> arcsA = graphe.suivants("A");
        assertEquals(2, arcsA.size(), "'A' devrait avoir deux arcs");

        List<Arc> arcsC = graphe.suivants("C");
        assertEquals(1, arcsC.size());
        assertEquals("D", arcsC.get(0).getDest());
        assertEquals(4.0, arcsC.get(0).getCout(), 0.0001);
    }

    @Test
    public void test4_SuivantsAvecNoeudInexistant() {
        GrapheListe graphe = new GrapheListe();

        List<Arc> arcs = graphe.suivants("Inconnu");
        assertNotNull(arcs, "Doit retourner une liste vide (pas null)");
        assertEquals(0, arcs.size(), "Doit retourner une liste vide si le noeud n'existe pas");
    }

    @Test
    public void test5_AjoutNoeudsIdentiques() {
        GrapheListe graphe = new GrapheListe();

        graphe.ajouterArc("A", "B", 1.0);
        graphe.ajouterArc("A", "B", 2.0); // ajoute un deuxième arc du même type

        List<Arc> arcs = graphe.suivants("A");
        assertEquals(2, arcs.size(), "Deux arcs de A vers B doivent être présents");
    }
}
