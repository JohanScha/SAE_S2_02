/**
 * Classe MainComparaison permettant de comparer les algorithmes de Dijkstra et Bellman-Ford
 * sur plusieurs graphes créés manuellement.
 */
public class MainComparaison {
    public static void main(String[] args) {
        // Crée 5 graphes différents pour tester les algorithmes
        GrapheListe[] graphes = new GrapheListe[5];

        // Graphe 1 : graphe simple (en forme de chaîne)
        graphes[0] = new GrapheListe();
        graphes[0].ajouterArc("A", "B", 1);
        graphes[0].ajouterArc("B", "C", 2);
        graphes[0].ajouterArc("C", "D", 3);

        // Graphe 2 : graphe avec cycle
        graphes[1] = new GrapheListe();
        graphes[1].ajouterArc("A", "B", 1);
        graphes[1].ajouterArc("B", "C", 2);
        graphes[1].ajouterArc("C", "A", 4);
        graphes[1].ajouterArc("C", "D", 1);

        // Graphe 3 : graphe dense (beaucoup d'arcs)
        graphes[2] = new GrapheListe();
        graphes[2].ajouterArc("A", "B", 1);
        graphes[2].ajouterArc("A", "C", 5);
        graphes[2].ajouterArc("B", "C", 1);
        graphes[2].ajouterArc("B", "D", 2);
        graphes[2].ajouterArc("C", "D", 1);
        graphes[2].ajouterArc("D", "A", 3);

        // Graphe 4 : graphe creux (peu d'arcs)
        graphes[3] = new GrapheListe();
        graphes[3].ajouterArc("A", "B", 1);
        graphes[3].ajouterArc("C", "D", 2);

        // Graphe 5 : plusieurs chemins de coût identique
        graphes[4] = new GrapheListe();
        graphes[4].ajouterArc("A", "B", 1);
        graphes[4].ajouterArc("A", "C", 1);
        graphes[4].ajouterArc("B", "D", 1);
        graphes[4].ajouterArc("C", "D", 1);

        // Affichage des graphes avant la comparaison
        for (int i = 0; i < graphes.length; i++) {
            System.out.println("=== Graphe " + (i + 1) + " ===");
            System.out.println(graphes[i]);  // Affiche chaque graphe
        }


        // Comparaison sur chaque graphe
        for (int i = 0; i < graphes.length; i++) {
            System.out.println("\n--- Graphe " + (i + 1) + " ---");
            GrapheListe graphe = graphes[i];
            String depart = "A";

            // Résultat avec Dijkstra
            Dijkstra dijkstra = new Dijkstra();
            Valeurs resDijkstra = dijkstra.resoudre(graphe, depart);
            System.out.println("\nRésultat Dijkstra :");
            for (String noeud : graphe.listeNoeuds()) {
                System.out.println(noeud + " : distance = " + resDijkstra.getValeur(noeud));
            }

            // Résultat avec Bellman-Ford
            BellmanFord bellmanFord = new BellmanFord();
            Valeurs resBellman = bellmanFord.resoudre(graphe, depart);
            System.out.println("\nRésultat Bellman-Ford :");
            for (String noeud : graphe.listeNoeuds()) {
                System.out.println(noeud + " : distance = " + resBellman.getValeur(noeud));
            }

            // Comparaison des résultats
            double sommeDijkstra = 0;
            double sommeBellman = 0;

            for (String noeud : graphe.listeNoeuds()) {
                double d1 = resDijkstra.getValeur(noeud);
                double d2 = resBellman.getValeur(noeud);

                // Ignore les noeuds non atteignables (infini)
                if (d1 != Double.MAX_VALUE) sommeDijkstra += d1;
                if (d2 != Double.MAX_VALUE) sommeBellman += d2;
            }

            System.out.println("\nRésultat de la comparaison :");
            if (sommeDijkstra < sommeBellman) {
                System.out.println("→ Dijkstra a été meilleur sur le graphe " + (i + 1));
            } else if (sommeBellman < sommeDijkstra) {
                System.out.println("→ Bellman-Ford a été meilleur sur le graphe " + (i + 1));
            } else {
                System.out.println("→ Égalité sur le graphe " + (i + 1));
            }

        }
    }
}
