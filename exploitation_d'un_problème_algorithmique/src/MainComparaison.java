/**
 * Classe MainComparaison permettant de comparer les algorithmes de Dijkstra et Bellman-Ford
 * sur plusieurs graphes créés manuellement, avec mesure du temps d'exécution en nanosecondes.
 */
public class MainComparaison {
    public static void main(String[] args) {
        GrapheListe[] graphes = new GrapheListe[5];

        // Initialisation des graphes
        graphes[0] = new GrapheListe();
        graphes[0].ajouterArc("A", "B", 1);
        graphes[0].ajouterArc("B", "C", 2);
        graphes[0].ajouterArc("C", "D", 3);

        graphes[1] = new GrapheListe();
        graphes[1].ajouterArc("A", "B", 1);
        graphes[1].ajouterArc("B", "C", 2);
        graphes[1].ajouterArc("C", "A", 4);
        graphes[1].ajouterArc("C", "D", 1);

        graphes[2] = new GrapheListe();
        graphes[2].ajouterArc("A", "B", 1);
        graphes[2].ajouterArc("A", "C", 5);
        graphes[2].ajouterArc("B", "C", 1);
        graphes[2].ajouterArc("B", "D", 2);
        graphes[2].ajouterArc("C", "D", 1);
        graphes[2].ajouterArc("D", "A", 3);

        graphes[3] = new GrapheListe();
        graphes[3].ajouterArc("A", "B", 1);
        graphes[3].ajouterArc("C", "D", 2);

        graphes[4] = new GrapheListe();
        graphes[4].ajouterArc("A", "B", 1);
        graphes[4].ajouterArc("A", "C", 1);
        graphes[4].ajouterArc("B", "D", 1);
        graphes[4].ajouterArc("C", "D", 1);

        // Affichage initial
        for (int i = 0; i < graphes.length; i++) {
            System.out.println("--- Graphe " + (i + 1) + " ---");
            System.out.println(graphes[i]);
        }

        long totalTempsDijkstra = 0;
        long totalTempsBellman = 0;

        for (int i = 0; i < graphes.length; i++) {
            System.out.println("\n--- Graphe " + (i + 1) + " ---");
            GrapheListe graphe = graphes[i];
            String depart = "A";

            // Dijkstra
            Dijkstra dijkstra = new Dijkstra();
            long debutDijkstra = System.nanoTime();
            Valeurs resDijkstra = dijkstra.resoudre(graphe, depart);
            long finDijkstra = System.nanoTime();
            long dureeDijkstra = finDijkstra - debutDijkstra;
            totalTempsDijkstra += dureeDijkstra;

            System.out.println("\n-- Résultat Dijkstra :");
            for (String noeud : graphe.listeNoeuds()) {
                System.out.println(noeud + " : distance = " + resDijkstra.getValeur(noeud));
            }
            System.out.println("-- Temps d'exécution Dijkstra : " + dureeDijkstra + " ns");

            // Bellman-Ford
            BellmanFord bellmanFord = new BellmanFord();
            long debutBellman = System.nanoTime();
            Valeurs resBellman = bellmanFord.resoudre(graphe, depart);
            long finBellman = System.nanoTime();
            long dureeBellman = finBellman - debutBellman;
            totalTempsBellman += dureeBellman;

            System.out.println("\n-- Résultat Bellman-Ford :");
            for (String noeud : graphe.listeNoeuds()) {
                System.out.println(noeud + " : distance = " + resBellman.getValeur(noeud));
            }
            System.out.println("-- Temps d'exécution Bellman-Ford : " + dureeBellman + " ns");

            // Comparaison des distances
            double sommeDijkstra = 0;
            double sommeBellman = 0;

            for (String noeud : graphe.listeNoeuds()) {
                double d1 = resDijkstra.getValeur(noeud);
                double d2 = resBellman.getValeur(noeud);

                if (d1 != Double.MAX_VALUE) sommeDijkstra += d1;
                if (d2 != Double.MAX_VALUE) sommeBellman += d2;
            }

            System.out.println("\n-- Comparaison des distances totales :");
            System.out.println("Dijkstra : " + sommeDijkstra);
            System.out.println("Bellman-Ford : " + sommeBellman);

            System.out.println("\n-- Résultat de la comparaison :");
            if (sommeDijkstra < sommeBellman) {
                System.out.println("→ Dijkstra a été meilleur sur le graphe (niveau couts) " + (i + 1));
            } else if (sommeBellman < sommeDijkstra) {
                System.out.println("→ Bellman-Ford a été meilleur sur le graphe (niveau couts) " + (i + 1));
            } else {
                System.out.println("→ Égalité sur le graphe " + (i + 1) + " (niveau couts)");
            }

            System.out.println("\n-- Résumé des temps d'exécution :");
            System.out.println("→ Dijkstra : " + dureeDijkstra + " ns");
            System.out.println("→ Bellman-Ford : " + dureeBellman + " ns");
        }

        // Résumé global
        double moyenneDijkstra = totalTempsDijkstra / (double) graphes.length;
        double moyenneBellman = totalTempsBellman / (double) graphes.length;

        System.out.println("\n--- Résumé global ---");
        System.out.println("Temps total Dijkstra     : " + totalTempsDijkstra + " ns");
        System.out.println("Temps total Bellman-Ford : " + totalTempsBellman + " ns");
        System.out.println("Temps moyen Dijkstra     : " + moyenneDijkstra + " ns");
        System.out.println("Temps moyen Bellman-Ford : " + moyenneBellman + " ns");

        if (moyenneDijkstra < moyenneBellman) {
            System.out.println("Globalement, Dijkstra est plus rapide. (niveau temps)");
        } else if (moyenneBellman < moyenneDijkstra) {
            System.out.println("Globalement, Bellman-Ford est plus rapide. (niveau temps)");
        } else {
            System.out.println("Globalement, les deux sont aussi rapides. (niveau temps)");
        }
    }
}
