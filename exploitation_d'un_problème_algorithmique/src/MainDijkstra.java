import java.util.List;

/**
 * Programme principal pour tester l'algorithme de Dijkstra.
 * Il crée un graphe par défaut, calcule les plus courts chemins depuis un nœud de départ,
 * affiche les distances et parents de chaque nœud, puis affiche un chemin complet.
 */
public class MainDijkstra {

    /**
     * Entrée du main
     *
     * @param args arguments de la ligne de commande (non utilisé)
     */
    public static void main(String[] args) {
        // Création d'un graphe avec des arcs et leurs coûts
        GrapheListe graphe = new GrapheListe();
        graphe.ajouterArc("A", "B", 12);
        graphe.ajouterArc("A", "D", 87);
        graphe.ajouterArc("B", "E", 11);
        graphe.ajouterArc("C", "A", 19);
        graphe.ajouterArc("D", "C", 10);
        graphe.ajouterArc("D", "B", 23);
        graphe.ajouterArc("E", "D", 43);

        // Noeud de départ pour Dijkstra
        String depart = "A";

        // Exécution de l'algorithme de Dijkstra sur le graphe
        Dijkstra algo = new Dijkstra();
        Valeurs resultats = algo.resoudre(graphe, depart);

        // Affichage des distances et parents pour chaque noeud du graphe
        for (String noeud : graphe.listeNoeuds()) {
            System.out.println(noeud + " : distance = " + resultats.getValeur(noeud) + ", parent = " + resultats.getParent(noeud));
        }

        // Affichage du chemin complet de depart à destination
        String destination = "D";
        System.out.print("Chemin de " + depart + " à " + destination + " : ");
        List<String> chemin = resultats.calculerChemin(destination, depart);

        // Affichage pas à pas des noeuds du chemin avec une flèche entre eux
        for (int i = 0; i < chemin.size(); i++) {
            System.out.print(chemin.get(i));
            if (i < chemin.size() - 1) {
                System.out.print(" -> ");
            }
        }
        System.out.println(); // Retour à la ligne à la fin de l'affichage du chemin
    }
}
