import java.util.List;

public class MainMetro {
    public static void main(String[] args) throws Exception {

        Graphe graphe = LireReseau.lire("exploitation_d'un_problème_algorithmique/Documents/plan-reseau.txt");

        Dijkstra dijkstra = new Dijkstra();
        BellmanFord bellmanFord = new BellmanFord();

        List<String[]> trajets = List.of(
                new String[]{"1", "17"},
                new String[]{"5", "23"},
                new String[]{"3", "15"},
                new String[]{"10", "25"},
                new String[]{"8", "13"}
        );

        System.out.printf("Départ", "Arrivée", "Chemin (ID stations)",
                "Temps Dijkstra (ns)", "Temps Bellman-Ford (ns)");

        for (String[] trajet : trajets) {
            String depart = trajet[0];
            String arrivee = trajet[1];

            // Dijkstra
            long debutDijkstra = System.nanoTime();
            Valeurs valeursDijkstra = dijkstra.resoudre(graphe, depart);
            long finDijkstra = System.nanoTime();
            long dureeDijkstraMs = finDijkstra - debutDijkstra;
            List<String> cheminDijkstra = valeursDijkstra.calculerChemin(arrivee, depart);

            // Bellman-Ford
            long debutBellman = System.nanoTime();
            Valeurs valeursBellman = bellmanFord.resoudre(graphe, depart);
            long finBellman = System.nanoTime();
            long dureeBellmanMs = finBellman - debutBellman;
            List<String> cheminBellman = valeursBellman.calculerChemin(arrivee, depart);

            // Affichage simple, tu peux ajuster la présentation
            System.out.printf(depart,
                    arrivee,
                    cheminDijkstra.toString(),
                    dureeDijkstraMs,
                    dureeBellmanMs
            );
        }
    }
}
