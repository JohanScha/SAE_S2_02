import java.io.*;
import java.util.*;

/**
 * Classe utilitaire pour lire un fichier de réseau de métro et construire un GrapheListe.
 */
public class LireReseau {

    /**
     * Lit un fichier de type plan-reseau.txt et retourne un GrapheListe avec les stations et les connexions.
     *
     * @param nomFichier le nom du fichier contenant les stations et connexions
     * @return un objet GrapheListe représentant le graphe du métro
     * @throws IOException en cas d'erreur de lecture du fichier
     */
    public static GrapheListe lire(String nomFichier) throws IOException {
        GrapheListe graphe = new GrapheListe();
        Map<String, String> idVersNom = new HashMap<>();

        BufferedReader lecteur = new BufferedReader(new FileReader(nomFichier));
        String ligne;
        boolean lectureStations = false;
        boolean lectureConnexions = false;

        while ((ligne = lecteur.readLine()) != null) {
            ligne = ligne.trim();
            if (ligne.startsWith("%")) {
                if (ligne.toLowerCase().contains("stations")) {
                    lectureStations = true;
                    lectureConnexions = false;
                } else if (ligne.toLowerCase().contains("connexions")) {
                    lectureStations = false;
                    lectureConnexions = true;
                }
                continue;
            }

            if (lectureStations && !ligne.isEmpty()) {
                // Format : id:nom:x:y:ligne1,ligne2,...
                String[] parties = ligne.split(":");
                if (parties.length < 2) continue;
                String id = parties[0];
                String nom = parties[1];
                idVersNom.put(id, nom);
                // Pas besoin d'ajouter les noeuds ici, ça se fera automatiquement dans ajouterArc
            }

            if (lectureConnexions && !ligne.isEmpty()) {
                // Format : id1:id2:temps:ligne
                String[] parties = ligne.split(":");
                if (parties.length != 4) continue;

                String idDepart = parties[0];
                String idArrivee = parties[1];
                double cout = Double.parseDouble(parties[2]);
                String ligneMetro = parties[3];

                String nomDepart = idVersNom.get(idDepart);
                String nomArrivee = idVersNom.get(idArrivee);

                if (nomDepart == null || nomArrivee == null) continue;

                // On ajoute les deux arcs car les connexions sont bidirectionnelles
                graphe.ajouterArc(nomDepart, new Arc(nomArrivee, cout, ligneMetro));
                graphe.ajouterArc(nomArrivee, new Arc(nomDepart, cout, ligneMetro));
            }
        }

        lecteur.close();
        return graphe;
    }
}
