import java.util.ArrayList;

/**
 * Classe qui implémente l'algorithme de Dijkstra.
 *
 * Cet algorithme sert à trouver les plus courts chemins depuis un point de départ
 * vers tous les autres nœuds d'un graphe avec des arcs à poids positifs.
 */
public class Dijkstra {

    /**
     * Applique l'algorithme de Dijkstra sur un graphe à poids positifs.
     *
     * @param g le graphe
     * @param depart le nom du noeud de départ
     * @return un objet Valeurs contenant les distances minimales et les parents
     */
    public Valeurs resoudre(Graphe g, String depart) {
        Valeurs valeurs = new Valeurs(); // distances + parents
        ArrayList<String> Q = new ArrayList<>(); // liste des noeuds à traiter

        // 1. Initialisation des valeurs
        for (String noeud : g.listeNoeuds()) {
            valeurs.setValeur(noeud, Double.MAX_VALUE);
            valeurs.setParent(noeud, null);
            Q.add(noeud); // on ajoute tous les noeuds à la liste Q
        }
        valeurs.setValeur(depart, 0); // le départ vaut 0

        // 2. Boucle principale de Dijkstra
        while (!Q.isEmpty()) {
            // Trouver le noeud u dans Q avec la plus petite valeur
            String u = Q.get(0);
            for (int i = 1; i < Q.size(); i++) {
                String c = Q.get(i); // Recupere le ième noeud
                if (valeurs.getValeur(c) < valeurs.getValeur(u)) { // comparaison des distances
                    u = c;
                }
            }

            // Enlever u de Q
            Q.remove(u);

            // Pour chaque voisin v de u (arc u → v)
            for (Arc arc : g.suivants(u)) {
                String v = arc.getDest();
                if (Q.contains(v)) { // v est encore dans Q
                    double d = valeurs.getValeur(u) + arc.getCout();
                    if (d < valeurs.getValeur(v)) {
                        valeurs.setValeur(v, d);     // meilleure distance
                        valeurs.setParent(v, u);     // meilleur chemin
                    }
                }
            }
        }

        // 3. Retour du résultat
        return valeurs;
    }
}
